import { ChowOptions } from 'oas3-chow-chow';
import { Context, Middleware } from 'koa';
import * as qs from 'qs';
export interface Config {
    /**
     * Absolute path to Openapi Document
     */
    file?: string;
    /**
     * Openapi document as a javascript object
     */
    spec?: object;
    /**
     * Whether to enable OpenAPI UI display and OpenAPI doc display
     */
    enableUi?: boolean;
    /**
     * Endpoint that serves raw Openapi Document in JSON
     * default: /openapi.json
     */
    endpoint: string;
    /**
     * Endpoint that serves Openapi UI
     * default: /openapi.html
     */
    uiEndpoint: string;
    /**
     * Validate the response
     */
    validateResponse: boolean;
    /**
     * Whitelist paths for request validation
     * default: ['/']
     */
    validatePaths: string[];
    /**
     * Optional base path to swagger ui bundle
     */
    swaggerUiBundleBasePath: string;
    /**
     * Optional custom error handler
     */
    errorHandler: (error: Error, ctx: Context) => void;
    /**
     * Body handlers to different request content-types
     * default:
     * {
     *  'application/json': bodyParser.json(),
        'text/*': bodyParser.text({ type: 'text/*'}),
        'application/x-www-form-urlencoded': bodyParser.urlencoded({extended: true})
     * }
     */
    requestBodyHandler?: {
        [key: string]: Middleware;
    };
    /**
     * Optional options for sending to oas3-chow-chow/AJV
     */
    validationOptions?: Partial<ChowOptions>;
    /**
     * Optional options for sending to oas-validator.
     * https://github.com/Mermade/oas-kit/blob/main/docs/options.md
     */
    oasValidatorOptions?: object;
    qsParseOptions?: qs.IParseOptions;
}
export declare function validateConfig(cfg: Partial<Config>): Config;
